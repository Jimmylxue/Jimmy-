(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{523:function(s,e,a){"use strict";a.r(e);var n=a(4),t=Object(n.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"webpack-打包构建工具的学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-打包构建工具的学习"}},[s._v("#")]),s._v(" webpack 打包构建工具的学习")]),s._v(" "),a("blockquote",[a("ul",[a("li",[s._v("webpack 是一个作为前端必须要会的一个工具，也就是项目的打包工具，主流的框架像 Vue React 都是基于这个打包构建的，")]),s._v(" "),a("li",[s._v("这是我第 N 次学习，这回比上回能够更加的理解了前端和打包的概念，立个 Flag，这回一定搞清楚 webpack")])])]),s._v(" "),a("h3",{attrs:{id:"五个核心概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五个核心概念"}},[s._v("#")]),s._v(" 五个核心概念")]),s._v(" "),a("blockquote",[a("p",[s._v("webpack 有五个核心概念，分别是 Enter OutPut Loader Plugin Mode")])]),s._v(" "),a("ul",[a("li",[s._v("Entry（入口）"),a("br"),s._v("\n项目开始打包的入口，主要告诉webpack这个打包工具，该往哪个地方开始打包。")]),s._v(" "),a("li",[s._v("OutPut（出口）"),a("br"),s._v("\n项目最终打包之后的bundle，通过output可以指定这些打包之后的bundle放在哪个位置。")]),s._v(" "),a("li",[s._v("Loader（翻译官）"),a("br"),s._v("\n浏览器基本上是只会识别最基本的JS代码css，Json代码，如果想要识别一些比较新的语法，如ES6、LESS等其他非常方便的语法是会报错的，因为浏览器不认识，这时候就需要Loader翻译官来负责翻译，将LESS转化成CSS，将ES6转换成ES5")]),s._v(" "),a("li",[s._v("Plugins（插件）"),a("br"),s._v("\n有了插件之后，我们可以做一些更加强大的事情，比如压缩代码等等。")]),s._v(" "),a("li",[s._v("Mode（模式）"),a("br"),s._v("\n模式有两种，development开发模式和production生产模式，两种模式下我们要考虑的东西是不一样的，如生产模式下我们就必须得压缩代码，使用CDN加速之类的。")])]),s._v(" "),a("p",[s._v("基本的流程就是一个项目从入口开始打包，根据环境来进行分别打包，遇到不认识的语法就是用Loader进行翻译之后继续打包，接着加载各种插件模块，最终导出到我们指定的位置。")]),s._v(" "),a("h3",{attrs:{id:"开始webpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开始webpack"}},[s._v("#")]),s._v(" 开始webpack")]),s._v(" "),a("blockquote",[a("p",[s._v("使用webpack之前电脑必须是有node环境的")])]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("cnpm install webpack webpack-cli -g")]),s._v("全局安装webpack，如果安装过了相当于是更新一遍")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("cnpm install webpack webpack-cli -D")]),s._v("webpack 下载的所有的东西都是属于开发的测试依赖，-D 相当于 --save -dev")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("webpack ./src/index.js -o ./build/build.js --mode=development")]),s._v(" 表示从index.js文件开始打包，打包之后的bundle块输出再build.js中，以开发模式进行打包")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("webpack ./src/index.js -o ./build/build.js --mode=production")]),s._v("表示从index.js文件开始打包，打包之后的bundle块输出再build.js中，以生产模式进行打包")])]),s._v(" "),a("li",[a("p",[s._v("在没有配代理的server之前可以这样输入长命令来配置")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("webpack")]),s._v(",解析"),a("code",[s._v("webpack.config.js")]),s._v("文件，之后自动进行打包")])])]),s._v(" "),a("h4",{attrs:{id:"知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#知识点"}},[s._v("#")]),s._v(" 知识点")]),s._v(" "),a("ul",[a("li",[s._v("默认生产模式会将代码进行一下压缩，去除换行，不必要的空格等等")]),s._v(" "),a("li",[s._v("打包是会识别ES6模块化的")]),s._v(" "),a("li",[s._v("打包只会识别"),a("code",[s._v("js")]),s._v("和"),a("code",[s._v("json")]),s._v("，是不能识别"),a("code",[s._v("css")]),s._v("的，识别"),a("code",[s._v("css")]),s._v("就需要使用到"),a("code",[s._v("Loader")]),s._v("翻译官来处理了（打包js不识别css，需要配合Loader，浏览器是识别css，但是不识别less之类的预编译语法，不能弄混乱了）")])]),s._v(" "),a("h3",{attrs:{id:"打包样式资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#打包样式资源"}},[s._v("#")]),s._v(" 打包样式资源")]),s._v(" "),a("blockquote",[a("p",[s._v("打包样式资源我们就必须得写一个"),a("code",[s._v("webpack.config.js")]),s._v("配置文件，")])]),s._v(" "),a("h4",{attrs:{id:"webpack-config-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-config-js"}},[s._v("#")]),s._v(" webpack.config.js")]),s._v(" "),a("p",[s._v("作用：指示 webpack干哪些活（当运行webpack的时候，就会预先执行这里面的配置）"),a("br"),s._v("\n所有的构建工具都是基于"),a("code",[s._v("Node.js")]),s._v("平台的，所以语法都必须使用"),a("code",[s._v("common.js")]),s._v("语法，如"),a("code",[s._v("modele.exports = {}")]),s._v("来暴露")]),s._v(" "),a("h4",{attrs:{id:"最基本的webpack-config-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最基本的webpack-config-js"}},[s._v("#")]),s._v(" 最基本的webpack.config.js")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  const {resolve} = require('path')\n  module.exports = {\n    // 入口文件\n    entry:'./src/index.js',\n    // 输出\n    output:{\n      // 文件名\n      filename:'built.js',\n      // 输出路径  reslove是node.js的fs核心模块中拼接路径的，能为我们拼接一个绝对路径\n      path:resolve(__dirname,'build')\n    },\n    module:{\n      rules:[\n        // 详细的loader规则\n        {\n          test:/\\.css$/, // test 匹配一个正则，表示遇到这类文件的时候会进入处理\n          use:[ // 匹配成功之后会处理的loader\n            // loader的执行顺序是从下到上依次执行的\n            'style-loader', // 创建style标签，将杨书记添加到head中，\n            'css-loader' // 将css文件变成commonjs模块加载到css中\n          ]\n        }\n      ]\n    },\n    plugins:[\n      // 详细的plugins插件配置\n    ],\n    mode:'development' // 开发模式\n  }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("p",[s._v("在使用各种loader之前都必须先安装一遍，安装成功之后之后输入"),a("code",[s._v("webpack")]),s._v("即可，原理是检测到"),a("code",[s._v("webpack")]),s._v("这个指令的时候就去执行"),a("code",[s._v("webpack.config.js")]),s._v("这个文件，这个文件里面我们已经配置好了，五个核心，所以就会自动打包")]),s._v(" "),a("h4",{attrs:{id:"知识点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#知识点-2"}},[s._v("#")]),s._v(" 知识点")]),s._v(" "),a("ul",[a("li",[s._v("Loader的执行顺序是从下到上执行的，所以如果解析less，是先执行"),a("code",[s._v("less-loader")]),s._v("，再执行"),a("code",[s._v("css-loader")]),s._v("，最后执行"),a("code",[s._v("style-loader")]),s._v("。")]),s._v(" "),a("li",[s._v("rules数组就是loader的一个个匹配的规则，数组的每个对象表示的是每种情况情况应该怎么处理。")])])])}),[],!1,null,null,null);e.default=t.exports}}]);